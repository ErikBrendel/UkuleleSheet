#!/usr/bin/env python3

import os
import subprocess

SONGS_DIR = "songs"

OUT_FILE = "tex/songs.tex"

# have this option in sync with option 1 and 2 in the songWithoutText - latex - command
PRINT_SONGS_WITHOUT_LYRICS_IN_BODY = True


def split_song(song_content):
    song_content.append("")
    song_content.append("")
    title = song_content.pop(0).strip()
    if title.endswith(':'):
        title = title[:-1]

    chord_lines = [song_content.pop(0)]
    while len(chord_lines[-1]) == 0:
        chord_lines.append(song_content.pop(0))
    while len(chord_lines[-1]) > 0:
        chord_lines.append(song_content.pop(0))
    chord_lines.pop()
    chords = '     '.join(chord_lines).strip().replace('     ', '~~~~~')

    lyrics = '\n'.join(song_content).strip()

    return [title, chords, lyrics]


def latex_lyrics(raw_lyrics):
    # .replace("\n\n", "\\\\\n\\NLS\n") \
    # .replace("\n", "\\NLS\n") \
    return raw_lyrics \
        .replace("\n", "\\\\\n") \
        .replace("[Ref]", "\emph{[Ref]}")


def latescape(raw):
    return raw \
        .replace('#', '\\#') \
        .replace('{', '\\{') \
        .replace('}', '\\}') \
        .replace('ä', '{\\"a}') \
        .replace('ö', '{\\"o}') \
        .replace('ü', '{\\"u}') \
        .replace('Ä', '{\\"A}') \
        .replace('Ö', '{\\"O}') \
        .replace('Ü', '{\\"U}') \
        .replace('ß', '{\\ss}') \
        .replace('->', '\\textrightarrow~') \
        .replace('=>', '\\textrightarrow~') \
        .replace("3/4", "\\textthreequarters~") \
        .replace('[', '\emph{\ensuremath{[}') \
        .replace(']', '\ensuremath{]}}')


def latex_song(song_data):
    title = latescape(song_data[0])
    chords = latescape(song_data[1]).replace('/', '|').replace('|', "$\mid$")
    lyrics = latex_lyrics(latescape(song_data[2]))
    if len(lyrics) > 0:
        return "\song{" + title + "}{" + chords + "}{\n" + lyrics + "\n}\n\n"
    if not PRINT_SONGS_WITHOUT_LYRICS_IN_BODY:
        chords = "\\hspace*{0.5cm}" + chords.replace("\\\\", "\\\\ \\hspace*{-0.185cm}")
    return "\songWithoutText{" + title + "}{" + chords + "}\n\n"


########
# MAIN #
########

print("refreshing songs...")

if not os.path.exists(SONGS_DIR):
    exit("Could not find songs directory!")

if not os.path.exists(OUT_FILE):
    exit("The file " + OUT_FILE + " does not exist!")

song_names = sorted(os.listdir(SONGS_DIR))
songs = []

for songName in song_names:
    path = os.path.join(SONGS_DIR, songName)
    with open(path, 'r') as song_file:
        song_file_content = song_file.readlines()
        songs.append(split_song([line.strip() for line in song_file_content]))

with open(OUT_FILE, 'w') as out_file:
    out_file.write("% This file was automatically generated by the updateSongs - script\n"
                   "% and will get overwritten by it again. Do not modify it!\n\n")
    for song in songs:
        song_serialized = latex_song(song)
        out_file.write("%s\n" % song_serialized)

print("Done generating tex file.")

#################
# RUNNING LATEX #
#################

print("Now running PdfLaTeX")
os.chdir("tex")
subprocess.run("pdflatex -synctex=1 -interaction=nonstopmode ukulele.tex".split())
print("All done!")

##################
# OPENING RESULT #
##################

subprocess.run("xdg-open ukulele.pdf".split())

print("Bye!")
